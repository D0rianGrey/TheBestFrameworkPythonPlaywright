#!/usr/bin/env python3
"""
WebSocket –ø—Ä–æ–∫—Å–∏ –¥–ª—è Chrome Remote Debugging
–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º Mac
"""
import asyncio
import websockets
import json
import aiohttp
from urllib.parse import urlparse
import argparse


class ChromeProxy:
    def __init__(self, remote_host: str, remote_port: int = 9222, local_port: int = 9223):
        self.remote_host = remote_host
        self.remote_port = remote_port
        self.local_port = local_port
        self.remote_base_url = f"http://{remote_host}:{remote_port}"
    
    async def proxy_websocket(self, websocket, path):
        """–ü—Ä–æ–∫—Å–∏—Ä—É–µ—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É Chrome"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É Chrome WebSocket
            remote_ws_url = f"ws://{self.remote_host}:{self.remote_port}{path}"
            print(f"Connecting to remote WebSocket: {remote_ws_url}")
            
            async with websockets.connect(remote_ws_url) as remote_ws:
                print(f"Connected to remote Chrome WebSocket")
                
                # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                async def forward_to_remote():
                    async for message in websocket:
                        await remote_ws.send(message)
                
                async def forward_to_local():
                    async for message in remote_ws:
                        await websocket.send(message)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                await asyncio.gather(
                    forward_to_remote(),
                    forward_to_local()
                )
                
        except Exception as e:
            print(f"WebSocket proxy error: {e}")
    
    async def handle_http_request(self, request):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ Chrome DevTools API"""
        try:
            # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É Chrome
            remote_url = f"{self.remote_base_url}{request.path_qs}"
            print(f"Proxying HTTP request: {remote_url}")
            
            async with aiohttp.ClientSession() as session:
                async with session.get(remote_url) as response:
                    content = await response.text()
                    
                    # –ó–∞–º–µ–Ω—è–µ–º localhost –Ω–∞ –Ω–∞—à –ø—Ä–æ–∫—Å–∏ –≤ WebSocket URL
                    if request.path.startswith('/json'):
                        content = content.replace(
                            f"ws://{self.remote_host}:{self.remote_port}",
                            f"ws://localhost:{self.local_port}"
                        )
                        content = content.replace(
                            f"ws://localhost:{self.remote_port}",
                            f"ws://localhost:{self.local_port}"
                        )
                    
                    return aiohttp.web.Response(
                        text=content,
                        status=response.status,
                        headers={'Content-Type': response.headers.get('Content-Type', 'application/json')}
                    )
        
        except Exception as e:
            print(f"HTTP proxy error: {e}")
            return aiohttp.web.Response(text=f"Proxy error: {e}", status=500)
    
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä"""
        print(f"Starting Chrome proxy server...")
        print(f"Remote Chrome: {self.remote_host}:{self.remote_port}")
        print(f"Local proxy: localhost:{self.local_port}")
        
        # HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è DevTools API
        app = aiohttp.web.Application()
        app.router.add_get('/{path:.*}', self.handle_http_request)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        runner = aiohttp.web.AppRunner(app)
        await runner.setup()
        site = aiohttp.web.TCPSite(runner, 'localhost', self.local_port)
        await site.start()
        
        # WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è DevTools Protocol
        ws_server = await websockets.serve(
            self.proxy_websocket,
            'localhost',
            self.local_port + 1  # WebSocket –Ω–∞ –ø–æ—Ä—Ç—É +1
        )
        
        print(f"‚úÖ Chrome proxy server started!")
        print(f"üì° HTTP API: http://localhost:{self.local_port}")
        print(f"üîå WebSocket: ws://localhost:{self.local_port + 1}")
        print(f"üéØ Test: curl http://localhost:{self.local_port}/json/version")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.Future()  # run forever


async def main():
    parser = argparse.ArgumentParser(description='Chrome Remote Debugging Proxy')
    parser.add_argument('--remote-host', required=True, help='Remote Chrome host IP')
    parser.add_argument('--remote-port', type=int, default=9222, help='Remote Chrome port')
    parser.add_argument('--local-port', type=int, default=9223, help='Local proxy port')
    
    args = parser.parse_args()
    
    proxy = ChromeProxy(args.remote_host, args.remote_port, args.local_port)
    await proxy.start_server()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Proxy server stopped") 