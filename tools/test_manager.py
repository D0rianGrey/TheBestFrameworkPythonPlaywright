#!/usr/bin/env python3
"""
CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
"""
import argparse
import subprocess
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config.config_manager import ConfigManager


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Playwright —Ç–µ—Å—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  python test_manager.py status

  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
  python test_manager.py local

  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
  python test_manager.py remote

  # –û–±–Ω–æ–≤–∏—Ç—å IP —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ Mac
  python test_manager.py remote --ip 192.168.1.100

  # –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏
  python test_manager.py proxy --enable

  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
  python test_manager.py run
  python test_manager.py run --file tests/test_simple.py
  python test_manager.py run --smoke
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    status_parser = subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    
    # –ö–æ–º–∞–Ω–¥–∞ local
    local_parser = subparsers.add_parser('local', help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º')
    local_parser.add_argument('--headless', action='store_true', help='–ó–∞–ø—É—Å–∫–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –≤ headless —Ä–µ–∂–∏–º–µ')
    local_parser.add_argument('--slow-mo', type=int, default=100, help='–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)')
    
    # –ö–æ–º–∞–Ω–¥–∞ remote
    remote_parser = subparsers.add_parser('remote', help='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º')
    remote_parser.add_argument('--ip', help='IP –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ Mac')
    remote_parser.add_argument('--port', type=int, default=9222, help='–ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 9222)')
    remote_parser.add_argument('--service', choices=['chrome', 'selenium', 'chromedriver'], 
                              default='chrome', help='–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞')
    
    # –ö–æ–º–∞–Ω–¥–∞ proxy
    proxy_parser = subparsers.add_parser('proxy', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏')
    proxy_group = proxy_parser.add_mutually_exclusive_group(required=True)
    proxy_group.add_argument('--enable', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
    proxy_group.add_argument('--disable', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏')
    proxy_parser.add_argument('--host', help='–•–æ—Å—Ç –ø—Ä–æ–∫—Å–∏')
    proxy_parser.add_argument('--port', type=int, help='–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ run
    run_parser = subparsers.add_parser('run', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã')
    run_parser.add_argument('--file', help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤')
    run_parser.add_argument('--smoke', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ smoke —Ç–µ—Å—Ç—ã')
    run_parser.add_argument('--regression', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å regression —Ç–µ—Å—Ç—ã')
    run_parser.add_argument('--slow', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å slow —Ç–µ—Å—Ç—ã')
    run_parser.add_argument('--auth', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å auth —Ç–µ—Å—Ç—ã')
    run_parser.add_argument('--parallel', type=int, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    run_parser.add_argument('--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    run_parser.add_argument('--quiet', action='store_true', help='–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        config = ConfigManager("config/test_config.json")
        
        if args.command == 'status':
            handle_status(config)
        elif args.command == 'local':
            handle_local(config, args)
        elif args.command == 'remote':
            handle_remote(config, args)
        elif args.command == 'proxy':
            handle_proxy(config, args)
        elif args.command == 'run':
            handle_run(config, args)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


def handle_status(config: ConfigManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã status"""
    config.print_current_config()


def handle_local(config: ConfigManager, args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã local"""
    config.set_test_mode('local')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if args.headless:
        config.config['local_settings']['headless'] = True
        print("üîß Headless mode enabled")
    
    if args.slow_mo != 100:
        config.config['local_settings']['slow_mo'] = args.slow_mo
        print(f"üîß Slow motion set to: {args.slow_mo}ms")
    
    config.save_config()
    config.print_current_config()


def handle_remote(config: ConfigManager, args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã remote"""
    config.set_test_mode('remote')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if args.ip:
        config.update_remote_ip(args.ip)
    
    if args.port != 9222:
        config.config['remote_settings']['port'] = args.port
        print(f"üîß Remote port set to: {args.port}")
    
    if args.service != 'chrome':
        config.config['remote_settings']['service_type'] = args.service
        print(f"üîß Service type set to: {args.service}")
    
    config.save_config()
    config.print_current_config()


def handle_proxy(config: ConfigManager, args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã proxy"""
    if args.enable:
        config.config['remote_settings']['use_proxy'] = True
        print("üîÑ Proxy enabled")
    elif args.disable:
        config.config['remote_settings']['use_proxy'] = False
        print("üîÑ Proxy disabled")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if args.host:
        config.config['remote_settings']['proxy_host'] = args.host
        print(f"üåê Proxy host set to: {args.host}")
    
    if args.port:
        config.config['remote_settings']['proxy_port'] = args.port
        print(f"üåê Proxy port set to: {args.port}")
    
    config.save_config()
    config.print_current_config()


def handle_run(config: ConfigManager, args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã run"""
    cmd = ["python", "-m", "pytest"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤
    if args.file:
        cmd.append(args.file)
    else:
        cmd.append("tests/")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
    markers = []
    if args.smoke:
        markers.append("smoke")
    if args.regression:
        markers.append("regression")
    if args.slow:
        markers.append("slow")
    if args.auth:
        markers.append("auth")
    
    if markers:
        cmd.extend(["-m", " or ".join(markers)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
    if args.parallel:
        cmd.extend(["-n", str(args.parallel)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä–±–æ–∑–Ω–æ—Å—Ç—å
    if args.verbose:
        cmd.append("-v")
        cmd.append("-s")
    elif args.quiet:
        cmd.append("-q")
    else:
        cmd.append("-v")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é verbose
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏
    cmd.extend([
        "--tb=short",
        "--durations=10"
    ])
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ: {config.get_test_mode()}")
    if config.is_remote_mode():
        print(f"üì° Remote URL: {config.get_remote_url()}")
    
    print(f"üîß Command: {' '.join(cmd)}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        result = subprocess.run(cmd, cwd=".", check=False)
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)


if __name__ == "__main__":
    main() 