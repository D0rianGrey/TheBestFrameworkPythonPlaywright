import pytest
from typing import Dict, Any
import os
import sys
from pathlib import Path
from playwright.sync_api import Browser, BrowserContext, Page

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config.config_manager import get_config


def pytest_configure(config: pytest.Config) -> None:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã"""
    config.addinivalue_line("markers", "smoke: quick smoke tests for basic functionality")
    config.addinivalue_line("markers", "regression: comprehensive regression test suite")  
    config.addinivalue_line("markers", "slow: slow running tests (> 30 seconds)")
    config.addinivalue_line("markers", "flaky: potentially unstable tests")
    config.addinivalue_line("markers", "auth: authentication related tests")
    config.addinivalue_line("markers", "ui: user interface tests")


@pytest.fixture(scope="session")
def browser_context_args(browser_context_args: Dict[str, Any]) -> Dict[str, Any]:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    return {
        **browser_context_args,
        "viewport": {"width": 1920, "height": 1080},
        "user_agent": "Mozilla/5.0 (Test Automation Bot)",
        "locale": "en-US",
        "timezone_id": "America/New_York"
    }


# base_url —Ñ–∏–∫—Å—Ç—É—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ fixtures.py


def pytest_collection_modifyitems(config: pytest.Config, items: list) -> None:
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    for item in items:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä 'ui' –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        item.add_marker(pytest.mark.ui)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä 'slow' –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'slow' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if "slow" in item.name.lower():
            item.add_marker(pytest.mark.slow)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä 'auth' –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤ –∫–ª–∞—Å—Å–µ TestAuthentication
        if item.cls and "Authentication" in item.cls.__name__:
            item.add_marker(pytest.mark.auth)


@pytest.hookimpl(optionalhook=True)
def pytest_html_results_table_header(cells) -> None:
    """–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ HTML –æ—Ç—á–µ—Ç–∞"""
    cells.insert(2, "<th>Description</th>")


@pytest.hookimpl(optionalhook=True) 
def pytest_html_results_table_row(report, cells) -> None:
    """–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ HTML –æ—Ç—á–µ—Ç–∞"""
    cells.insert(2, f"<td>{getattr(report, 'description', '')}</td>") 


def pytest_addoption(parser):
    """–î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser.addoption(
        "--remote-browser",
        action="store",
        default=None,
        help="URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ws://192.168.195.104:9222)"
    )
    parser.addoption(
        "--browser-name",
        action="store", 
        default="chromium",
        help="–ò–º—è –±—Ä–∞—É–∑–µ—Ä–∞: chromium, firefox, webkit"
    )
    parser.addoption(
        "--test-mode",
        action="store",
        choices=["local", "remote"],
        default=None,
        help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: local –∏–ª–∏ remote"
    )


@pytest.fixture(scope="session")
def browser_type_launch_args(pytestconfig):
    """–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
    remote_url = pytestconfig.getoption("--remote-browser")
    test_mode = pytestconfig.getoption("--test-mode")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    if test_mode:
        os.environ['TEST_MODE'] = test_mode
    
    config = get_config()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"\nüîß Test Configuration:")
    print(f"   Mode: {config.get_test_mode()}")
    if config.is_remote_mode():
        print(f"   Remote URL: {config.get_remote_url()}")
    
    if remote_url or config.is_remote_mode():
        # –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ browser fixture
        return {}
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        local_settings = config.config['local_settings']
        return {
            "headless": local_settings.get('headless', False),
            "slow_mo": local_settings.get('slow_mo', 100)
        }


@pytest.fixture(scope="session")
def browser(browser_type, browser_type_launch_args, pytestconfig):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    remote_url = pytestconfig.getoption("--remote-browser")
    config = get_config()
    
    if remote_url:
        # –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        print(f"   Connecting to remote browser: {remote_url}")
        # –î–ª—è CDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º connect_over_cdp
        if remote_url.startswith('ws://') and '/devtools/' in remote_url:
            browser = browser_type.connect_over_cdp(remote_url)
        else:
            browser = browser_type.connect(ws_endpoint=remote_url)
    elif config.is_remote_mode():
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        remote_ws_url = config.get_remote_url()
        print(f"   Connecting to remote browser: {remote_ws_url}")
        # –î–ª—è CDP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º connect_over_cdp
        if remote_ws_url.startswith('ws://') and '/devtools/' in remote_ws_url:
            browser = browser_type.connect_over_cdp(remote_ws_url)
        else:
            browser = browser_type.connect(ws_endpoint=remote_ws_url)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
        browser = browser_type.launch(**browser_type_launch_args)
    
    yield browser
    # –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º browser
    if not (remote_url or config.is_remote_mode()):
        browser.close()


@pytest.fixture(scope="session") 
def context_args():
    """–ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
    config = get_config()
    context_args = config.get_context_args()
    
    # –î–æ–±–∞–≤–ª—è–µ–º user agent
    context_args["user_agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
    
    return context_args


@pytest.fixture(autouse=True)
def setup_test_environment():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –∏ —Ç.–¥.
    print("\nüîß Setting up test environment...")
    yield
    print("üßπ Cleaning up test environment...") 