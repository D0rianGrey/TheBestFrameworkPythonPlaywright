"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∏–∫—Å—Ç—É—Ä –∏–∑ fixtures.py
"""
from typing import Dict, Any
import pytest
from playwright.sync_api import Page, expect
from fixtures import (
    base_url, 
    test_data, 
    page_with_base_url, 
    navigation_helper, 
    element_checker, 
    test_config
)


@pytest.mark.smoke
def test_using_navigation_helper(navigation_helper, test_data: Dict[str, Any]) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è navigation_helper —Ñ–∏–∫—Å—Ç—É—Ä—ã
    """
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ A/B Testing
    navigation_helper.go_to_link("A/B Testing")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    expected_url = test_data["expected_urls"]["A/B Testing"]
    assert expected_url in navigation_helper.page.url
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ
    navigation_helper.go_back_to_main()
    expect(navigation_helper.page).to_have_url(navigation_helper.base_url)


@pytest.mark.regression
def test_using_element_checker(page_with_base_url: Page, element_checker, test_data: Dict[str, Any]) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è element_checker —Ñ–∏–∫—Å—Ç—É—Ä—ã
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    element_checker.check_page_title("The Internet")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
    assert "the-internet.herokuapp.com" in page_with_base_url.url
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    main_links = test_data["main_links"][:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏
    element_checker.check_links_visible(main_links)


def test_using_test_config(page: Page, base_url: str, test_config: Dict[str, Any]) -> None:
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è test_config —Ñ–∏–∫—Å—Ç—É—Ä—ã
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    page.set_viewport_size(test_config["viewport"])
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
    page.goto(base_url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º viewport
    viewport = page.viewport_size
    assert viewport is not None, "Viewport size should not be None"
    assert viewport["width"] == test_config["viewport"]["width"]
    assert viewport["height"] == test_config["viewport"]["height"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    expect(page).to_have_title("The Internet")


@pytest.mark.parametrize("link_name", [
    "A/B Testing",
    "Add/Remove Elements", 
    "Checkboxes"
])
def test_parametrized_with_fixtures(navigation_helper, test_data: Dict[str, Any], link_name: str) -> None:
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–∫—Å—Ç—É—Ä
    """
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    navigation_helper.go_to_link(link_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    expected_url_part = test_data["expected_urls"][link_name]
    assert expected_url_part in navigation_helper.page.url


class TestFixturesIntegration:
    """
    –ö–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä
    """
    
    def test_multiple_fixtures_together(
        self, 
        page_with_base_url: Page, 
        navigation_helper, 
        element_checker, 
        test_data: Dict[str, Any]
    ) -> None:
        """
        –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–∫—Å—Ç—É—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        """
        # page_with_base_url —É–∂–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page = page_with_base_url
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º element_checker –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        element_checker.check_page_title("The Internet")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º navigation_helper –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏  
        navigation_helper.go_to_link("Form Authentication")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
        assert "/login" in page.url
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
        expect(page.get_by_label("Username")).to_be_visible()
        expect(page.get_by_label("Password")).to_be_visible()
    
    @pytest.mark.auth
    def test_auth_workflow_with_fixtures(
        self, 
        navigation_helper, 
        test_data: Dict[str, Any]
    ) -> None:
        """
        –¢–µ—Å—Ç workflow –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–∫—Å—Ç—É—Ä
        """
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        navigation_helper.go_to_link("Form Authentication")
        
        page = navigation_helper.page
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ test_data
        username, password = test_data["auth_data"]
        page.get_by_label("Username").fill(username)
        page.get_by_label("Password").fill(password)
        
        # –ù–∞–∂–∏–º–∞–µ–º Login
        page.get_by_role("button", name="Login").click()
        
        # –ñ–¥–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        page.wait_for_load_state("networkidle")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—Ö –∏–ª–∏ –Ω–µ—É–¥–∞—á–∞)
        if "/secure" in page.url:
            # –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
            expect(page.get_by_text("Welcome to the Secure Area")).to_be_visible()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            assert "/login" in page.url
            # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ-—Å–∞–π—Ç–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏


@pytest.mark.slow
def test_comprehensive_site_walkthrough(
    navigation_helper, 
    test_data: Dict[str, Any], 
    test_config: Dict[str, Any]
) -> None:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ —Å–∞–π—Ç—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ–∏–∫—Å—Ç—É—Ä
    """
    successful_tests = 0
    skipped_tests = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
    for link_name in test_data["main_links"]:
        print(f"üìç Testing {link_name}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            navigation_helper.go_to_link(link_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –∏–∑–º–µ–Ω–∏–ª—Å—è
            expected_url_part = test_data["expected_urls"][link_name]
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Add/Remove Elements (–º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ)
            if link_name == "Add/Remove Elements":
                assert (expected_url_part in navigation_helper.page.url or 
                       f"{expected_url_part}/" in navigation_helper.page.url)
            else:
                assert expected_url_part in navigation_helper.page.url
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            navigation_helper.go_back_to_main()
            
            print(f"‚úÖ {link_name} test completed")
            successful_tests += 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è {link_name} test skipped due to: {str(e)}")
            skipped_tests += 1
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            try:
                navigation_helper.go_to_main()
            except:
                pass
    
    print(f"üéâ Test summary: {successful_tests} successful, {skipped_tests} skipped") 