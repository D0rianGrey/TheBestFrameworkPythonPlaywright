"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import os
from typing import Dict, Any, Optional
from pathlib import Path


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤"""

    def __init__(self, config_file: str = "test_config.json"):
        self.config_file = Path(config_file)
        self.config = self._load_config()

    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.config_file.exists():
            raise FileNotFoundError(f"Config file not found: {self.config_file}")

        with open(self.config_file, "r", encoding="utf-8") as f:
            return json.load(f)

    def save_config(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        with open(self.config_file, "w", encoding="utf-8") as f:
            json.dump(self.config, f, indent=4, ensure_ascii=False)
        print(f"‚úÖ Configuration saved to {self.config_file}")

    def get_test_mode(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è > –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return os.getenv("TEST_MODE", self.config.get("test_mode", "local"))

    def set_test_mode(self, mode: str) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if mode not in ["local", "remote"]:
            raise ValueError("Mode must be 'local' or 'remote'")

        self.config["test_mode"] = mode
        self.config["remote_settings"]["enabled"] = mode == "remote"
        print(f"üîß Test mode set to: {mode}")

    def is_remote_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        return self.get_test_mode() == "remote"

    def get_remote_url(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if not self.is_remote_mode():
            return None

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è > –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        ip = os.getenv("REMOTE_MAC_IP", self.config["remote_settings"].get("mac_ip"))
        port = os.getenv(
            "REMOTE_PORT", str(self.config["remote_settings"].get("port", 9222))
        )
        service_type = os.getenv(
            "SERVICE_TYPE", self.config["remote_settings"].get("service_type", "chrome")
        )

        # –ï—Å–ª–∏ IP —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if ip and ("://" in ip or "/" in ip):
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not ip.startswith("ws://") and not ip.startswith("http://"):
                return f"ws://{ip}"
            return ip

        # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        if service_type == "chrome":
            return f"ws://{ip}:{port}"
        elif service_type == "selenium":
            return f"http://{ip}:{port}"
        else:
            return f"http://{ip}:{port}"

    def get_browser_launch_args(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.is_remote_mode():
            # –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π dict
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—É –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ connect(), –∞ –Ω–µ launch()
            return {}
        else:
            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
            headless = (
                os.getenv(
                    "HEADLESS",
                    str(self.config["local_settings"].get("headless", False)),
                ).lower()
                == "true"
            )
            slow_mo = int(
                os.getenv(
                    "SLOW_MO", str(self.config["local_settings"].get("slow_mo", 100))
                )
            )

            return {"headless": headless, "slow_mo": slow_mo}

    def get_context_args(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        general = self.config["general_settings"]
        context_args = {
            "viewport": general.get("viewport", {"width": 1920, "height": 1080}),
            "ignore_https_errors": True,
        }

        return context_args

    def update_remote_ip(self, ip: str) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å IP –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ Mac"""
        self.config["remote_settings"]["mac_ip"] = ip
        print(f"üåê Remote Mac IP updated to: {ip}")

    def print_current_config(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        mode = self.get_test_mode()
        print(f"\nüìã Current Configuration:")
        print(f"   Mode: {mode}")

        if mode == "remote":
            remote_url = self.get_remote_url()
            service_type = os.getenv(
                "SERVICE_TYPE",
                self.config["remote_settings"].get("service_type", "chrome"),
            )

            print(f"   Remote URL: {remote_url}")
            print(f"   Service Type: {service_type}")
        else:
            browser = os.getenv(
                "BROWSER", self.config["local_settings"].get("browser", "chromium")
            )
            headless = (
                os.getenv(
                    "HEADLESS",
                    str(self.config["local_settings"].get("headless", False)),
                ).lower()
                == "true"
            )
            print(f"   Browser: {browser}")
            print(f"   Headless: {headless}")

        print(f"   Viewport: {self.config['general_settings']['viewport']}")
        print()

    def print_env_vars(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\nüåç Environment Variables:")
        env_vars = [
            "TEST_MODE",
            "REMOTE_MAC_IP",
            "REMOTE_PORT",
            "SERVICE_TYPE",
            "BROWSER",
            "HEADLESS",
            "SLOW_MO",
        ]

        for var in env_vars:
            value = os.getenv(var)
            if value:
                print(f"   {var}: {value}")
        print()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigManager("config/test_config.json")


def get_config() -> ConfigManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config_manager


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    config = ConfigManager()
    config.print_current_config()
    config.print_env_vars()

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    config.set_test_mode("remote")
    config.print_current_config()

    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    config.set_test_mode("local")
    config.print_current_config()
