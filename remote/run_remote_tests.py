#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º Mac
"""
import subprocess
import sys
import argparse
from remote_config import RemoteConfig


def run_remote_tests(
    remote_ip: str = None,
    test_file: str = None,
    service_type: str = "chrome",
    use_proxy: bool = False,
    verbose: bool = True
):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º Mac"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
    if remote_ip:
        RemoteConfig.REMOTE_MAC_IP = remote_ip
    
    # –ü–æ–ª—É—á–∞–µ–º URL —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    remote_url = RemoteConfig.get_remote_browser_url(service_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É pytest
    cmd = [
        "python", "-m", "pytest",
        f"--remote-browser={remote_url}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if test_file:
        cmd.append(test_file)
    else:
        cmd.append("tests/")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏
    if verbose:
        cmd.append("-v")
        cmd.append("-s")  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å print statements
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
    cmd.extend([
        "--tb=short",  # –ö–æ—Ä–æ—Ç–∫–∏–π traceback
        "--durations=10"  # –ü–æ–∫–∞–∑–∞—Ç—å 10 —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    ])
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º Mac: {RemoteConfig.REMOTE_MAC_IP}")
    print(f"üì° Remote URL: {remote_url}")
    print(f"üîß Command: {' '.join(cmd)}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        result = subprocess.run(cmd, check=False)
        return result.returncode
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        return 1


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ Playwright —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º Mac")
    
    parser.add_argument(
        "--remote-ip",
        default=RemoteConfig.REMOTE_MAC_IP,
        help=f"IP –∞–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ Mac (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {RemoteConfig.REMOTE_MAC_IP})"
    )
    
    parser.add_argument(
        "--test-file",
        help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—Å–µ —Ç–µ—Å—Ç—ã)"
    )
    
    parser.add_argument(
        "--service-type",
        choices=["chrome", "selenium", "chromedriver"],
        default="chrome",
        help="–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: chrome)"
    )
    
    parser.add_argument(
        "--use-proxy",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    
    parser.add_argument(
        "--quiet",
        action="store_true",
        help="–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ verbose –≤—ã–≤–æ–¥–∞)"
    )
    
    args = parser.parse_args()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    exit_code = run_remote_tests(
        remote_ip=args.remote_ip,
        test_file=args.test_file,
        service_type=args.service_type,
        use_proxy=args.use_proxy,
        verbose=not args.quiet
    )
    
    sys.exit(exit_code)


if __name__ == "__main__":
    main() 